Lesson 4: Arrays
LESSON I CAN: I CAN use strings arrays and conditionals in C++

By the end of this lesson you will be able to:
- Iterate over an array
- Compare items in arrays
- Pass an array into a function
- Understand type_t
- Unpack an array
- Search and sort arrays
- Create multi dimensional arrays

State Standards: ***This is a UVU CS1410 requirement***

INSTRUCTIONS:
- Notes are taken during class and can be taken on paper, on a digital document, or in a specific folder in your programming files (VS Code and Github)

QUESTIONS:
- How are for loops constructed in C++?
Use 'for (counting variable; continue condition; increment variable){code}

- When do you need to use curly brackets in C++?
After a conditional or loop that is more than one line long.

- How do you compare items in arrays?
Within a for loop, check if array1[i] == array2[i] with some modification to the index if needed (eg. i-3)

- How do you use an array as an argument in a function?
When defining the function, you must include brackets on the array argument. (eg. int my_func(string my_array[]){})

- What is type_t?
It's a variable type that takes up the same amount of space as 'long long', but can't be negative.

- Why would we use type_t?
It's the largest amount of space you can use for a variable, so it's a safe bet if you aren't sure how large something will be.

- How do you search an array?
Iterate over every item until one is the same as your key value. (if statement inside for loop)

- How do you sort an array?
Iterate through an array, swapping values that are in the wrong order. Repeat until the list is sorted.

- How do you make a multi-dimensional array?
You put arrays inside a larger array. You must include another set of brackets for how many items are in each sub-array and sub-arrays should use parentheses.